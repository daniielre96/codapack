/**	
 *	Copyright 2011-2016 Marc Comas - Santiago Thi√≥
 *
 *	This file is part of CoDaPack.
 *
 *  CoDaPack is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  CoDaPack is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with CoDaPack.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DataList.java
 *
 * Created on 22/09/2010, 11:54:48
 */

package coda.gui;

import coda.DataFrame;
import javafx.collections.FXCollections;
import javafx.collections.ListChangeListener;
import javafx.collections.ObservableList;
import javafx.scene.control.CheckBoxTreeItem;
import javafx.scene.control.ListView;
import javafx.scene.control.SelectionMode;
import javafx.scene.control.TreeItem;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.Pane;
import org.controlsfx.control.CheckListView;
import org.controlsfx.control.CheckTreeView;



/**
 *
 * @author mcomas
 */
public class DataList extends BorderPane {
    CheckTreeView<String> list = new CheckTreeView<>();
    public DataList(){
        //list.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);
        setCenter(list);
    }
    public void addDataFrame(DataFrame df){
        ObservableList<String> items =  FXCollections.observableArrayList();
        CheckBoxTreeItem<String> root = new CheckBoxTreeItem<>("Data");
        root.setExpanded(true);
        for(String vname: df.getNames()){
            root.getChildren().add(new CheckBoxTreeItem<>(vname));
        }
        root.selectedProperty().setValue(true);
        list = new CheckTreeView<>(root);
        list.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);
        setCenter(list);
    }
//    public static final long serialVersionUID = 1L;
//    //private String rootName = "CoDaPack";
//
//    public DataList() {
//        initComponents();
//    }
//    public void setData(DataFrame df){
//        //frames.add(df);
//        //frame = df;
//        DefaultListModel model = new DefaultListModel();
//        for(String name : df.getNames())
//            model.addElement(name);
//        /*
//        Iterator it = df.getNamesIterator();
//        while(it.hasNext()){
//            model.addElement((String)it.next());
//        }*/
//        dataList.setModel(model);
//    }
//    public int[] getSelectedData(){
//        return dataList.getSelectedIndices();
//    }
//    public void clearData(){
//        dataList.setModel(new DefaultListModel());
//    }
//    /** This method is called from within the constructor to
//     * initialize the form.
//     * WARNING: Do NOT modify this code. The content of this method is
//     * always regenerated by the Form Editor.
//     */
//    
//    private void initComponents() {
//
//        jScrollPane1 = new javax.swing.JScrollPane();
//        dataList = new javax.swing.JList();
//
//        setPreferredSize(new java.awt.Dimension(175, 500));
//        setLayout(new java.awt.BorderLayout());
//        
//        jScrollPane1.setPreferredSize(new java.awt.Dimension(175, 500));        
//        jScrollPane1.setViewportView(dataList);
//        add(jScrollPane1, java.awt.BorderLayout.CENTER);
//    }
//
//    // Variables declaration - do not modify//GEN-BEGIN:variables
//    private javax.swing.JList dataList;
//    private javax.swing.JScrollPane jScrollPane1;
//    // End of variables declaration//GEN-END:variables

}
